using System;
using System.Collections.Generic;

namespace SingleMachineTotalWeightedTardinessProblem
{
    class PopulationByRandom : IPopulationGenerator
    {
        public List<Task> Sample {get;}

        public PopulationByRandom(List<Task> Sample)
        {
            this.Sample = Sample;
        }

        public List<Codestring> GetPopulation(int sizeOfPopulation)
        {
            List<Codestring> Population = new List<Codestring>();
            for (int i = 0; i < sizeOfPopulation; i++)
            {
                Population.Add(GenerateRandCodestring());
            }

            return Population;
        }

        private Codestring GenerateRandCodestring()
        {
            Random rnd = new Random();
            List<int> indexes = new List<int>();
            List<int> codestring = new List<int>();
            for (int i = 0; i < Sample.Count; i++)
            {
                indexes.Add(i);
            }

            for (int i = 0; i < Sample.Count; i++)
            {
                int randInd = rnd.Next(0, indexes.Count);
                codestring.Add(indexes[randInd]);
                indexes.RemoveAt(randInd);
            }
            return new Codestring(codestring, Sample);
        }

        public override string ToString()
        {
            return "Population generated by random";
        }
    }
}
